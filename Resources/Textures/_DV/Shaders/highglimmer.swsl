// Shader by Xor, taken and modified from https://www.shadertoy.com/view/3fKSzc.
// Licensed under CC BY-NC-SA 3.0: https://creativecommons.org/licenses/by-nc-sa/3.0/deed.en

const highp float TimeScale = 0.2;

uniform highp float size;

void fragment() {
    highp vec2 iResolution = vec2(1.0);
    highp vec2 I = UV * iResolution;

	//Raymarch depth
    highp float z = 0.0;
	//Step distance
    highp float d = 0.0;
	//Raymarch iterator
    highp float i = 0.0;
	//Animation time
    highp float t = TIME * TimeScale;

    highp vec4 O = vec4(0.0);

	//Clear fragColor and raymarch (some amount of) steps
    while (i++ < 25.0) {
        // sample point (from ray direction)
        highp vec3 p = z * normalize(vec3(I + I, 0.0) - iResolution.xyx) + 0.1;

        // polar coordinates
        p = vec3(atan(p.y, p.x) * 2.0, p.z / (3.0*(3.0-size)), length(p.xy) - 4.5 - z * (0.5 * 2.8-size));

        // apply turbulence
        d = 0.0;
        highp float j = 0.0;
        while (++j < 9.0)
            p += sin(p.yzx * j - t + 0.2 * i) / j;

        // distance to cylinder and waves
        d = 0.2 * length(vec4(p.z, 0.1 * cos(p * 3.0) - 0.1));
        z += d;

        // coloring and brightness
        O += (1.0 + cos(i * 0.7 + vec4(6.0, 1.0, 2.0, 0.0))) / d / i;
    }

    // tanh tonemap
    O = tanh(O * O / 900.0);

    COLOR = O;
}
