light_mode unshaded;

uniform highp vec2 tileSize; //this can probably just be TEXTURE_PIXEL_SIZE instead?
uniform highp vec3 hsv;

void fragment() {
    highp vec4 colour = texture(TEXTURE, UV);
	COLOR = vec4(hsv2rgb(rgb2hsv(colour.rgb) * hsv), colour.a);
}

highp vec2 quantiseVecDown(highp vec2 v, highp vec2 divisions) {
    highp vec2 multiple = vec2(1.0, 1.0) / divisions;
    highp vec2 rem = mod(v, multiple);
    return v - rem;
}

//hate that I have to do this because we can't just set the loop behaviour on the texture
highp vec2 loopVec(highp vec2 toLoop) {
    return abs(mod(toLoop, 1));
}

highp vec3 rgb2hsv(highp vec3 c) {
    highp vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    highp vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    highp vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    highp float d = q.x - min(q.w, q.y);
    highp float e = 0.00000000010; //because this doesn't support doing 1.0e-10
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

highp vec3 hsv2rgb(highp vec3 c) {
    highp vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    highp vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}
