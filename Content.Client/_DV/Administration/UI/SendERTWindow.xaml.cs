using System.Linq;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Content.Shared._DV.ERT;

namespace Content.Client._DV.Administration.UI;

[GenerateTypedNameReferences]
public sealed partial class SendERTWindow : DefaultWindow
{
    [Dependency] private readonly IPrototypeManager _prototype = default!;
    private ProtoId<ERTTeamPrototype>? _selectedTeam;
    private Dictionary<ProtoId<ERTRolePrototype>, int> _selectedRoles = new();

    public event Action<ProtoId<ERTTeamPrototype>, Dictionary<ProtoId<ERTRolePrototype>, int>>? OnSendTeam;

    public SendERTWindow()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        Setup();

        ERTTeamOption.OnItemSelected += TeamSelected;
        SendButton.OnPressed += SendPressed;
    }

    private void TeamSelected(OptionButton.ItemSelectedEventArgs args)
    {
        ERTTeamOption.SelectId(args.Id);
        _selectedTeam = (string?)ERTTeamOption.SelectedMetadata;

        SetupMemberComposition();
    }

    private void SendPressed(Button.ButtonEventArgs args)
    {
        if (_selectedTeam is not { } team)
            return;

        if (!_selectedRoles.Any(role => role.Value > 0))
            return;

        OnSendTeam?.Invoke(team, _selectedRoles);
    }

    private void Setup()
    {
        SetupERTTeamChoice();
        SetupMemberComposition();
    }

    /// <summary>
    /// Sets up the ERT team option button based on defined ERTTeamPrototype
    /// </summary>
    private void SetupERTTeamChoice()
    {
        var teams = _prototype.EnumeratePrototypes<ERTTeamPrototype>();

        ERTTeamOption.Clear();
        var i = 0;
        var selectedIndex = 0;
        foreach (var team in teams)
        {
            ERTTeamOption.AddItem(Loc.GetString(team.Name), i);
            ERTTeamOption.SetItemMetadata(i, team.ID);

            if (team.ID == _selectedTeam)
                selectedIndex = i;

            i++;
        }

        ERTTeamOption.Select(selectedIndex);
        _selectedTeam = (string?)ERTTeamOption.SelectedMetadata;
    }

    /// <summary>
    /// Sets up the ERT role count configuration based on the selected ERTTeamPrototype
    /// </summary>
    private void SetupMemberComposition()
    {
        RoleList.DisposeAllChildren();

        if (_selectedTeam is not { } team)
            return;

        if (!_prototype.TryIndex(team, out var ertTeam))
            return;

        var roles = ertTeam.Roles.Keys.OrderBy(key => Loc.GetString(_prototype.Index(key).Name));
        foreach (var role in roles)
        {
            var box = new BoxContainer();
            var spinBox = new SpinBox();

            if (_selectedRoles.TryGetValue(role, out var roleCount))
                spinBox.Value = roleCount;
            spinBox.HorizontalExpand = true;
            spinBox.ValueChanged += (args) =>
            {
                _selectedRoles[role] = args.Value;
            };

            var label = new Label() { Text = Loc.GetString(_prototype.Index(role).Name), HorizontalExpand = true };

            box.AddChild(label);
            box.AddChild(spinBox);

            RoleList.AddChild(box);
        }
    }
}
