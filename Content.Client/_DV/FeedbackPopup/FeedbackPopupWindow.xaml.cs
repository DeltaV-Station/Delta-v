using Content.Client.UserInterface.Controls;
using Content.Shared._DV.FeedbackOverwatch;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client._DV.FeedbackPopup;

[GenerateTypedNameReferences]
public sealed partial class FeedbackPopupWindow : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _proto = default!;
    [Dependency] private readonly IGameTiming _gameTiming = default!;

    private readonly FeedbackPopupPrototype _feedbackpopup;

    private TimeSpan? _resetSubmitButtonTime;

    public event Action<(LocId, string)>? OnSubmitted;

    public FeedbackPopupWindow(ProtoId<FeedbackPopupPrototype> popupProto)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        // Save the proto so we can use it later.
        _feedbackpopup = _proto.Index(popupProto);

        // When the submit button is pressed, pass up the vars back to the UI controller.
        SubmitButton.OnPressed += OnSubmitButtonPressed;

        PopulateWindow();
    }

    private void PopulateWindow()
    {
        // Title
        TitleLabel.Text = Loc.GetString(_feedbackpopup.Title);

        // Description
        foreach (var section in _feedbackpopup.Description)
            CreateSection(Loc.GetString(section));

        // Set the feedback submission to the correct visibility
        FeedbackReplyContainer.Visible = _feedbackpopup.FeedbackField;
    }

    private void CreateSection(string text)
    {
        var label = new RichTextLabel
        {
            Text = text,
            Margin = new Thickness(0,0,0,10),
        };
        SectionContainer.AddChild(label);
    }

    private void OnSubmitButtonPressed(BaseButton.ButtonEventArgs args)
    {
        // Don't do anything if they haven't written anything.
        if (string.IsNullOrWhiteSpace(Rope.Collapse(FeedbackReply.TextRope)))
            return;

        // First time the button has been clicked
        if (_resetSubmitButtonTime == null || _resetSubmitButtonTime < _gameTiming.RealTime)
        {
            SubmitButton.Text = Loc.GetString("feedbackpopup-submit-feedback-button-confirm");
            SubmitButton.ModulateSelfOverride = Color.Red;
            _resetSubmitButtonTime = _gameTiming.RealTime + TimeSpan.FromSeconds(2);
            return;
        }

        // Button has been clicked inside the confirmation time.
        OnSubmitted?.Invoke((_feedbackpopup.PopupName, Rope.Collapse(FeedbackReply.TextRope)));
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (_resetSubmitButtonTime < _gameTiming.RealTime)
            ResetSubmitButton();
    }

    private void ResetSubmitButton()
    {
        SubmitButton.Text = Loc.GetString("feedbackpopup-submit-feedback-button");
        SubmitButton.ModulateSelfOverride = null;
    }
}

