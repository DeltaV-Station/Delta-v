
using Content.Client.UserInterface.Controls;
using Content.Shared._DV.Reputation;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._DV.Reputation.UI;

[GenerateTypedNameReferences]
public sealed partial class ContractsWindow : FancyWindow
{
    [Dependency] private EntityManager _entMan = default!;

    public event Action<int>? OnAccept;
    public event Action<int>? OnComplete;
    public event Action<int>? OnReject;
    public event Action? OnRescan;

    public EntityUid Owner;

    public ContractsWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        RescanButton.OnPressed += _ => OnRescan?.Invoke();
    }

    public void UpdateState()
    {
        if (!_entMan.TryGetComponent<ContractsComponent>(Owner, out var comp))
            return;

        if (comp.CurrentLevel is {} level)
            Level.Text = Loc.GetString(level.Name);
        Reputation.Text = $"{comp.Reputation} Reputation";

        Contracts.RemoveAllChildren();
        var slotsFull = true;
        for (int i = 0; i < comp.Slots.Count; i++)
        {
            var index = i;
            if (comp.Slots[i].ObjectiveTitle is {} title)
            {
                var contract = new Contract(title);
                contract.OnComplete += () => OnComplete?.Invoke(index);
                contract.OnReject += () => OnReject?.Invoke(index);
                Contracts.AddChild(contract);
                // TODO: green when objective is complete
            }
            else
            {
                var empty = new EmptyContract(comp.Slots[i].NextUnlock));
                if (!empty.IsLocked)
                    slotsFull = false;
                Contracts.AddChild(empty);
            }
        }

        Offerings.RemoveAllChildren();
        for (int i = 0; i < comp.OfferingTitles.Count; i++)
        {
            var index = i;
            var offering = comp.OfferingTitles[i];
            var button = new Button()
            {
                Text = offering
            };
            button.OnPressed += _ => OnAccept?.Invoke(index);
            button.Disabled = slotsFull;
            Offerings.AddChild(button);
        }

        // failsafe incase of bad rng or whatever not giving you anything
        RescanContainer.Visible = comp.OfferingTitles.Count == 0;
    }
}
