using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client._DV.Reputation.UI;

/// <summary>
/// Contract control placed in a slot that with no contract.
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class EmptyContract : BoxContainer
{
    [Dependency] private readonly IGameTiming _timing = default!;

    public event Action? OnUnlock;

    private TimeSpan? _nextUnlock;
    private TimeSpan _nextUpdate;

    public bool IsLocked => UnlockLabel.Visible;

    public EmptyContract(TimeSpan? nextUnlock)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _nextUnlock = nextUnlock;
        _nextUpdate = _timing.CurTime;

        UpdateUnlock();
    }

    private void UpdateUnlock()
    {
        if (_nextUnlock is not {} next)
            return;

        var now = _timing.CurTime;
        if (now >= next)
        {
            // unlocked now
            _nextUnlock = null;
            UnlockLabel.Visible = false;
            OnUnlock?.Invoke();
            return;
        }

        UnlockLabel.Visible = true;
        var remaining = next - now;
        var time = $"{remaining.Minutes:00}:{remaining.Seconds:00}";
        UnlockLabel.Text = Loc.GetString("contract-next-unlock", ("time", time));
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        var now = _timing.CurTime;
        if (now < _nextUpdate)
            return;

        _nextUpdate = now + TimeSpan.FromSeconds(1);
        UpdateUnlock();
    }
}
