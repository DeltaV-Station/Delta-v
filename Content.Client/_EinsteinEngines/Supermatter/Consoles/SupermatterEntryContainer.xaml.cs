using Content.Client.Stylesheets;
using Content.Shared._EinsteinEngines.Supermatter.Components;
using Content.Shared._EinsteinEngines.Supermatter.Monitor;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map;

namespace Content.Client._EinsteinEngines.Supermatter.Consoles;

[GenerateTypedNameReferences]
public sealed partial class SupermatterEntryContainer : BoxContainer
{
    public NetEntity NetEntity;
    public EntityCoordinates? Coordinates;

    private readonly IEntityManager _entManager;
    private readonly IResourceCache _cache;

    private Dictionary<SupermatterStatusType, string> _statusStrings = new Dictionary<SupermatterStatusType, string>()
    {
        [SupermatterStatusType.Inactive] = "supermatter-console-window-inactive-status",
        [SupermatterStatusType.Normal] = "supermatter-console-window-normal-status",
        [SupermatterStatusType.Caution] = "supermatter-console-window-caution-status",
        [SupermatterStatusType.Warning] = "supermatter-console-window-warning-status",
        [SupermatterStatusType.Danger] = "supermatter-console-window-danger-status",
        [SupermatterStatusType.Emergency] = "supermatter-console-window-emergency-status",
        [SupermatterStatusType.Delaminating] = "supermatter-console-window-delaminating-status"
    };

    public SupermatterEntryContainer(NetEntity uid, EntityCoordinates? coordinates)
    {
        RobustXamlLoader.Load(this);

        _entManager = IoCManager.Resolve<IEntityManager>();
        _cache = IoCManager.Resolve<IResourceCache>();

        NetEntity = uid;
        Coordinates = coordinates;

        // Load fonts
        var headerFont = new VectorFont(_cache.GetResource<FontResource>("/Fonts/NotoSans/NotoSans-Bold.ttf"), 11);
        var normalFont = new VectorFont(_cache.GetResource<FontResource>("/Fonts/NotoSansDisplay/NotoSansDisplay-Regular.ttf"), 11);
        var smallFont = new VectorFont(_cache.GetResource<FontResource>("/Fonts/NotoSans/NotoSans-Regular.ttf"), 10);

        // Set fonts
        TemperatureHeaderLabel.FontOverride = headerFont;
        PressureHeaderLabel.FontOverride = headerFont;
        OxygenationHeaderLabel.FontOverride = headerFont;
        GasesHeaderLabel.FontOverride = headerFont;

        TemperatureLabel.FontOverride = normalFont;
        PressureLabel.FontOverride = normalFont;
        OxygenationLabel.FontOverride = normalFont;

        NoDataLabel.FontOverride = headerFont;

        SilenceCheckBox.Label.FontOverride = smallFont;
        SilenceCheckBox.Label.FontColorOverride = Color.DarkGray;
    }

    public void UpdateEntry(SupermatterConsoleEntry entry, bool isFocus, SupermatterFocusData? focusData = null)
    {
        NetEntity = entry.NetEntity;
        Coordinates = _entManager.GetCoordinates(entry.NetCoordinates);

        // Load fonts
        var normalFont = new VectorFont(_cache.GetResource<FontResource>("/Fonts/NotoSansDisplay/NotoSansDisplay-Regular.ttf"), 11);

        // Update supermatter status
        if (!_statusStrings.TryGetValue(entry.EntityStatus, out var statusString))
            statusString = "supermatter-console-window-error-status";

        StatusLabel.Text = Loc.GetString(statusString);
        StatusLabel.FontColorOverride = GetStatusColor(entry.EntityStatus);

        // Update supermatter name
        SupermatterNameLabel.Text = Loc.GetString("supermatter-console-window-sm-label", ("name", entry.EntityName));

        // Focus updates
        FocusContainer.Visible = isFocus;

        if (isFocus)
            SetAsFocus();
        else
            RemoveAsFocus();

        if (isFocus)
        {
            if (focusData != null)
            {
                /*
                // Update temperature
                var tempK = (FixedPoint2)focusData.Value.TemperatureData.Item1;
                var tempC = (FixedPoint2)TemperatureHelpers.KelvinToCelsius(tempK.Float());

                TemperatureLabel.Text = Loc.GetString("atmos-alerts-window-temperature-value", ("valueInC", tempC), ("valueInK", tempK));
                TemperatureLabel.FontColorOverride = GetAlarmStateColor(focusData.Value.TemperatureData.Item2);

                // Update pressure
                PressureLabel.Text = Loc.GetString("atmos-alerts-window-pressure-value", ("value", (FixedPoint2)focusData.Value.PressureData.Item1));
                PressureLabel.FontColorOverride = GetAlarmStateColor(focusData.Value.PressureData.Item2);

                // Update oxygenation
                var oxygenPercent = (FixedPoint2)0f;
                var oxygenAlert = AtmosAlarmType.Invalid;

                if (focusData.Value.GasData.TryGetValue(Gas.Oxygen, out var oxygenData))
                {
                    oxygenPercent = oxygenData.Item2 * 100f;
                    oxygenAlert = oxygenData.Item3;
                }

                OxygenationLabel.Text = Loc.GetString("atmos-alerts-window-oxygenation-value", ("value", oxygenPercent));
                OxygenationLabel.FontColorOverride = GetAlarmStateColor(oxygenAlert);

                // Update other present gases
                GasGridContainer.RemoveAllChildren();

                var gasData = focusData.Value.GasData.Where(g => g.Key != Gas.Oxygen);
                var keyValuePairs = gasData.ToList();

                if (keyValuePairs.Count == 0)
                {
                    // No other gases
                    var gasLabel = new Label()
                    {
                        Text = Loc.GetString("atmos-alerts-window-other-gases-value-nil"),
                        FontOverride = normalFont,
                        FontColorOverride = StyleNano.DisabledFore,
                        HorizontalAlignment = HAlignment.Center,
                        VerticalAlignment = VAlignment.Center,
                        HorizontalExpand = true,
                        Margin = new Thickness(0, 2, 0, 0),
                        SetHeight = 24f,
                    };

                    GasGridContainer.AddChild(gasLabel);
                }

                else
                {
                    // Add an entry for each gas
                    foreach ((var gas, (var mol, var percent, var alert)) in keyValuePairs)
                    {
                        FixedPoint2 gasPercent = percent * 100f;
                        var gasAbbreviation = Atmospherics.GasAbbreviations.GetValueOrDefault(gas, Loc.GetString("gas-unknown-abbreviation"));

                        var gasLabel = new Label()
                        {
                            Text = Loc.GetString("atmos-alerts-window-other-gases-value", ("shorthand", gasAbbreviation), ("value", gasPercent)),
                            FontOverride = normalFont,
                            FontColorOverride = GetAlarmStateColor(alert),
                            HorizontalAlignment = HAlignment.Center,
                            VerticalAlignment = VAlignment.Center,
                            HorizontalExpand = true,
                            Margin = new Thickness(0, 2, 0, 0),
                            SetHeight = 24f,
                        };

                        GasGridContainer.AddChild(gasLabel);
                    }
                }
                */
            }
        }
    }

    public void SetAsFocus()
    {
        FocusButton.AddStyleClass(StyleNano.StyleClassButtonColorGreen);
        ArrowTexture.TexturePath = "/Textures/Interface/Nano/inverted_triangle.svg.png";
    }

    public void RemoveAsFocus()
    {
        FocusButton.RemoveStyleClass(StyleNano.StyleClassButtonColorGreen);
        ArrowTexture.TexturePath = "/Textures/Interface/Nano/triangle_right.png";
        FocusContainer.Visible = false;
    }

    private Color GetStatusColor(SupermatterStatusType status)
    {
        switch (status)
        {
            case SupermatterStatusType.Inactive:
                return StyleNano.DisabledFore;

            case SupermatterStatusType.Normal:
                return StyleNano.GoodGreenFore;

            case SupermatterStatusType.Caution:
            case SupermatterStatusType.Warning:
                return StyleNano.ConcerningOrangeFore;

            case SupermatterStatusType.Danger:
            case SupermatterStatusType.Emergency:
            case SupermatterStatusType.Delaminating:
                return StyleNano.DangerousRedFore;
        }

        return StyleNano.DisabledFore;
    }
}
