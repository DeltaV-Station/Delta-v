using System.Linq;
using Content.Shared.CartridgeLoader.Cartridges;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.DeltaV.CartridgeLoader.Cartridges;

[GenerateTypedNameReferences]
public sealed partial class StockTradingUiFragment : BoxContainer
{
    private readonly Dictionary<string, CompanyEntry> _companyEntries = new();

    // Event handlers for the parent UI
    public event Action<string, float>? OnBuyButtonPressed;
    public event Action<string, float>? OnSellButtonPressed;

    public StockTradingUiFragment()
    {
        RobustXamlLoader.Load(this);
    }

    public void UpdateState(StockTradingUiState state)
    {
        NoEntries.Visible = state.Entries.Count == 0;
        Balance.Text = $"Balance: {state.Balance:F2} credits";

        // Remove old entries
        foreach (var key in _companyEntries.Keys.ToList().Where(key => state.Entries.All(e => e.Name != key)))
        {
            _companyEntries[key].Container.RemoveAllChildren();
            _companyEntries.Remove(key);
        }

        // Update or add new entries
        foreach (var company in state.Entries)
        {
            if (!_companyEntries.TryGetValue(company.Name, out var entry))
            {
                entry = new CompanyEntry(company.Name, OnBuyButtonPressed, OnSellButtonPressed);
                _companyEntries[company.Name] = entry;
                Entries.AddChild(entry.Container);
            }

            var ownedStocks = state.OwnedStocks.GetValueOrDefault(company.Name, 0);
            entry.Update(company, ownedStocks);
        }
    }

    private sealed class CompanyEntry
    {
        public readonly BoxContainer Container;
        private readonly Label _nameLabel;
        private readonly Label _priceLabel;
        private readonly Label _changeLabel;
        private readonly Button _sellButton;
        private readonly Button _buyButton;
        private readonly Label _sharesLabel;
        private readonly LineEdit _amountEdit;
        private readonly string _companyName;

        // Define colors
        private static readonly Color PositiveColor = Color.FromHex("#00ff00"); // Green
        private static readonly Color NegativeColor = Color.FromHex("#ff0000"); // Red
        private static readonly Color NeutralColor = Color.FromHex("#ffffff"); // White

        public CompanyEntry(string companyName, Action<string, float>? onBuyPressed, Action<string, float>? onSellPressed)
        {
            _companyName = companyName;

            Container = new BoxContainer
            {
                Orientation = LayoutOrientation.Vertical,
                HorizontalExpand = true,
                Margin = new Thickness(0, 0, 0, 10),
            };

            // Company info panel
            var companyPanel = new PanelContainer();

            var mainContent = new BoxContainer
            {
                Orientation = LayoutOrientation.Vertical,
                HorizontalExpand = true,
                Margin = new Thickness(8),
            };

            var topRow = new BoxContainer
            {
                Orientation = LayoutOrientation.Horizontal,
                HorizontalExpand = true,
            };

            _nameLabel = new Label
            {
                HorizontalExpand = true,
                Text = companyName,
            };

            _priceLabel = new Label
            {
                MinWidth = 100,
                HorizontalAlignment = HAlignment.Right,
            };

            _changeLabel = new Label
            {
                MinWidth = 100,
                HorizontalAlignment = HAlignment.Right,
                Modulate = NeutralColor, // Default color
            };

            topRow.AddChild(_nameLabel);
            topRow.AddChild(_priceLabel);
            topRow.AddChild(_changeLabel);
            // var graph = new PriceHistoryGraph();
            // mainContent.AddChild(graph);

            // Trading controls
            var bottomRow = new BoxContainer
            {
                Orientation = LayoutOrientation.Horizontal,
                HorizontalExpand = true,
                Margin = new Thickness(0, 5, 0, 0),
            };

            _sharesLabel = new Label
            {
                Text = "Owned: 0",
                MinWidth = 100,
            };

            _amountEdit = new LineEdit
            {
                PlaceHolder = "Amount",
                HorizontalExpand = true,
                MinWidth = 80,
            };

            var buttonContainer = new BoxContainer
            {
                Orientation = LayoutOrientation.Horizontal,
                HorizontalAlignment = HAlignment.Right,
                MinWidth = 140,
            };

            _buyButton = new Button
            {
                Text = "Buy",
                MinWidth = 65,
                Margin = new Thickness(0, 0, 5, 0),
            };

            _sellButton = new Button
            {
                Text = "Sell",
                MinWidth = 65,
            };

            buttonContainer.AddChild(_buyButton);
            buttonContainer.AddChild(_sellButton);

            bottomRow.AddChild(_sharesLabel);
            bottomRow.AddChild(_amountEdit);
            bottomRow.AddChild(buttonContainer);

            mainContent.AddChild(topRow);
            mainContent.AddChild(bottomRow);
            companyPanel.AddChild(mainContent);
            Container.AddChild(companyPanel);

            // Button click events
            _buyButton.OnPressed += _ =>
            {
                if (float.TryParse(_amountEdit.Text, out var amount))
                    onBuyPressed?.Invoke(_companyName, amount);
            };

            _sellButton.OnPressed += _ =>
            {
                if (float.TryParse(_amountEdit.Text, out var amount))
                    onSellPressed?.Invoke(_companyName, amount);
            };
        }

        public void Update(StockCompanyStruct company, int ownedStocks)
        {
            _nameLabel.Text = company.Name;
            _priceLabel.Text = $"${company.CurrentPrice:F2}";
            _sharesLabel.Text = $"Owned: {ownedStocks}";

            var priceChange = 0f;
            if (company.PriceHistory.Count > 0)
            {
                var previousPrice = company.PriceHistory[^1];
                priceChange = ((company.CurrentPrice - previousPrice) / previousPrice) * 100;
            }

            _changeLabel.Text = $"{(priceChange >= 0 ? "+" : "")}{priceChange:F2}%";

            // Update color based on price change
            _changeLabel.Modulate = priceChange switch
            {
                > 0 => PositiveColor,
                < 0 => NegativeColor,
                _ => NeutralColor,
            };

            // Disable sell button if no shares owned
            _sellButton.Disabled = ownedStocks <= 0;
        }
    }
}
