using Content.Client.UserInterface.Controls;
using Content.Shared.DeltaV.FeedbackOverwatch;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Network;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;

namespace Content.Client.DeltaV.FeedbackPopup;

[GenerateTypedNameReferences]
public sealed partial class FeedbackPopupWindow : FancyWindow
{
    [Dependency] private readonly IPrototypeManager _proto = default!;
    [Dependency] private readonly IClientNetManager _netManager = default!;

    private readonly FeedbackPopupPrototype _feedbackpopup;
    public FeedbackPopupWindow(ProtoId<FeedbackPopupPrototype> popupProto)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        // Save the proto so we can use it later.
        _feedbackpopup = _proto.Index(popupProto);
        PopulateWindow();
    }

    private void PopulateWindow()
    {
        // Title
        TitleLabel.Text = _feedbackpopup.Title;

        // Description
        foreach (var section in _feedbackpopup.Description)
            CreateSection(section);

        // Set the feedback submission to the correct visability
        FeedbackReplyContainer.Visible = _feedbackpopup.FeedbackField;

        SubmitButton.OnPressed += OnButtonPressed;
    }

    private void CreateSection(string text)
    {
        var label = new RichTextLabel
        {
            Text = text,
            Margin = new Thickness(0,0,0,10),
        };
        SectionContainer.AddChild(label);
    }

    private void OnButtonPressed(BaseButton.ButtonEventArgs args)
    {
        _netManager.ClientSendMessage(new FeedbackResponseMessage{ FeedbackName = _feedbackpopup.PopupName, FeedbackMessage = Rope.Collapse(FeedbackReply.TextRope) });
        Close(); // adios
    }
}

