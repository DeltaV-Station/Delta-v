using Content.Client.UserInterface.Controls;
using Content.Shared._CD.Records;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;
using System.Linq;

namespace Content.Client._CD.Records.UI;

[GenerateTypedNameReferences]
public sealed partial class RecordEntryEditPopup : FancyWindow
{
    private bool _isValid;

    private record struct ValidationRule(
        Func<bool> IsInvalid,
        string LocalizationKey,
        (string, object)[]? Parameters = null);

    public RecordEntryEditPopup()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        ValidationLabel.FontColorOverride = CharacterRecordViewer.ErrorColor;
        ValidationLabel.Visible = false;

        // Style the content panel
        var styleBox = new StyleBoxFlat
        {
            BackgroundColor = CharacterRecordViewer.ContentPanelColor,
            BorderColor = CharacterRecordViewer.BorderColor,
            BorderThickness = new Thickness(1),
        };

        ContentPanel.PanelOverride = styleBox;

        SetupEventHandlers();
    }

    private void SetupEventHandlers()
    {
        TitleEdit.OnTextChanged += args =>
        {
            if (args.Text.Length > PlayerProvidedCharacterRecords.TextMedLen)
            {
                TitleEdit.Text = args.Text[..PlayerProvidedCharacterRecords.TextMedLen];
            }
            ValidateFields();
        };

        InvolvedEdit.OnTextChanged += args =>
        {
            if (args.Text.Length > PlayerProvidedCharacterRecords.TextMedLen)
            {
                InvolvedEdit.Text = args.Text[..PlayerProvidedCharacterRecords.TextMedLen];
            }
            ValidateFields();
        };

        DescriptionEdit.OnTextChanged += _ => ValidateFields();

        SaveButton.OnPressed += _ =>
        {
            if (!_isValid)
                return;
            Close();
        };

        DescriptionEdit.Placeholder =
            new Rope.Leaf(Loc.GetString("cd-records-entry-edit-popup-description-placeholder"));

        TitleEdit.PlaceHolder = Loc.GetString("cd-records-entry-edit-popup-title-placeholder");
        InvolvedEdit.PlaceHolder = Loc.GetString("cd-records-entry-edit-popup-involved-placeholder");
    }

    private void ValidateFields()
    {
        var descriptionText = Rope.Collapse(DescriptionEdit.TextRope);
        var descriptionLength = descriptionText.Length;

        // Validation rules in priority order
        // Overcomplicated into oblivion just because I didn't like how the else if statements looked
        var rules = new[]
        {
            new ValidationRule(
                () => string.IsNullOrWhiteSpace(TitleEdit.Text),
                "cd-records-entry-edit-popup-title-required"),

            new ValidationRule(
                () => string.IsNullOrWhiteSpace(InvolvedEdit.Text),
                "cd-records-entry-edit-popup-involved-required"),

            new ValidationRule(
                () => string.IsNullOrWhiteSpace(descriptionText),
                "cd-records-entry-edit-popup-description-required"),

            new ValidationRule(
                () => descriptionLength > PlayerProvidedCharacterRecords.TextVeryLargeLen,
                "cd-records-entry-edit-popup-description-too-long",
                new[]
                {
                    ("current", (object)descriptionLength),
                    ("max", PlayerProvidedCharacterRecords.TextVeryLargeLen)
                }),
        };

        // Find first failing validation rule
        var failedRule = rules.FirstOrDefault(rule => rule.IsInvalid());

        if (failedRule.IsInvalid != null)
        {
            ValidationLabel.Text = failedRule.Parameters != null
                ? Loc.GetString(failedRule.LocalizationKey, failedRule.Parameters)
                : Loc.GetString(failedRule.LocalizationKey);
            ValidationLabel.Visible = true;
            _isValid = false;
        }
        else
        {
            ValidationLabel.Visible = false;
            _isValid = true;
        }

        SaveButton.Disabled = !_isValid;
    }

    public PlayerProvidedCharacterRecords.RecordEntry GetContents()
    {
        var desc = Rope.Collapse(DescriptionEdit.TextRope).Trim();
        return new PlayerProvidedCharacterRecords.RecordEntry(
            TitleEdit.Text.Trim(),
            InvolvedEdit.Text.Trim(),
            desc);
    }

    public void SetContents(PlayerProvidedCharacterRecords.RecordEntry entry)
    {
        TitleEdit.Text = entry.Title;
        InvolvedEdit.Text = entry.Involved;
        DescriptionEdit.TextRope = new Rope.Leaf(entry.Description);
        ValidateFields();
    }
}
